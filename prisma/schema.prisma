// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?
    ownedRooms               Room[]   @relation("RoomOwner")
    participantIn            Room[]   @relation("RoomParticipants")
    songsAdded               Song[]
    votes                    Vote[]
    queue                    Queue[]  @relation("OwnedQueue")
    participatingQueue       Queue[]  @relation("ParticipatingQueue")

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
       
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//App Data Models

model Room {
    id            String    @id  @default(cuid())
    name          String
    passcode      String    
    owner         Account   @relation("RoomOwner", fields: [ownerId], references: [id])
    ownerId       String 
    createdAt     DateTime  @default(now())
    participants  Account[] @relation("RoomParticipants")
    queue         Queue?
}

model Queue {
    id            String    @id @default(cuid())
    owner         Account   @relation("OwnedQueue", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId       String    
    participants  Account[] @relation("ParticipatingQueue")
    songs         Song[]
    room          Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId        String    @unique
}

model Song {
    id         String  @id  @default(cuid())
    name       String
    url        String  @unique
    queue      Queue   @relation(fields: [queueId], references: [id])
    queueId    String
    upvotes    Int     @default(0)
    downvotes  Int     @default(0)
    addedBy    Account @relation(fields: [addedById], references: [id])
    addedById  String
    vote       Vote[]
}

model Vote {
    id          String    @id @default(cuid())
    song        Song      @relation(fields: [songId], references: [id], onDelete: Cascade)
    songId      String
    user        Account   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    voteType    VoteType
    createdAt   DateTime  @default(now())
    
    @@unique([songId, userId])
}

enum VoteType {
    UPVOTE
    DOWNVOTE
}